# Source: "Think Artificial Intelligence" by Jerry Cuomo, 2024
# Purpose: Demonstrates the integration of LangChain with OpenAI to generate and evaluate responses in French, including the handling of inappropriate content.
# Copyright Â© 2024 Jerry Cuomo. All rights reserved.
#
# This code was autogenerated by GPT-4, updated with the following prompt:
# Prompt: Prompt: Design a LangChain agent to autonomously process {huma prompt} using a tool-chain consisting of web search, math calculation, and a large language model.
# About: This script implements a LangChain agent capable of autonomously processing various inputs by utilizing a dynamic toolchain. This includes a web search tool for data retrieval, a math calculator for numerical analysis, and a large language model (LLM) for generating comprehensive responses. The example provided demonstrates querying global solar power output in 2023, showcasing the agent's versatility in handling both factual data retrieval and complex computation.
# Setup: Ensure a Python environment with LangChain, LangChain-OpenAI, and necessary web search and math calculation tools installed. API keys for OpenAI and web search services must be securely configured. This setup enables the LangChain agent to leverage external data sources and LLM capabilities to process and respond to inquiries effectively.
# Note: The script also utilizes SERPAPI for search functionality, demonstrating a comprehensive approach to response generation and evaluation.

# Import necessary packages from LangChain and set up environment variables for API keys
from langchain.agents import AgentType, initialize_agent, load_tools
from langchain_openai import OpenAI
import os

# Set OpenAI and SERPAPI API keys (ensure these are securely managed and not hard-coded in production)
os.environ["OPENAI_API_KEY"] = "INSERT_OPENAI_API_KEY_HERE"
os.environ["SERPAPI_API_KEY"] = "INSERT_SERPAPI_KEY_HERE"

# Initialize the OpenAI agent with a specific temperature setting
llm = OpenAI(temperature=.7)

# Load necessary tools for the agent, including SERPAPI for searches and llm-math for mathematical queries
tools = load_tools(["serpapi", "llm-math"], llm=llm)

# Initialize the agent with the loaded tools, setting it to a zero-shot react description mode for dynamic response handling
agent = initialize_agent(
    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True
)

# Define a query and invoke the agent to handle it, demonstrating the agent's capability to generate and evaluate responses
#query="How much energy did wind turbines produce worldwide in 2023?"
query="What was the total solar power output globally in 2023?"
agent.invoke(query)
